!!!
%html
  %head
    %title Release Memes
    %script{async: true, src: "https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js", id: "shims"}
      :plain
        if (window.chrome) {
          var scriptTag = document.getElementById("shims");
          $(scriptTag).remove();
        }
    %link{rel: 'stylesheet', href: '/webfonts/isabel.css'}
    :css
      *, body { margin: 0; padding: 0; }
      img {
        max-width: 50vw;
      }
      #stats {
        position: fixed;
        bottom: 0;
        left: 0;
      }
      #standby {
        position: fixed;
        background: url('https://media0.giphy.com/media/rfMhqKKVr7F21PSlN9/giphy.gif') no-repeat;
        background-size: 100%;
        width: 200px;
        height: 200px;
        top: calc(50vh - 100px);
        left: calc(50% - 100px);
        z-index: 100;

      }
      #standby.nogood {
        background: url('https://media2.giphy.com/media/ELHBAG93WsTVjyV0W8/giphy.gif') no-repeat 50%;
      }
      #content{
        position: fixed;
        width: 100vw;
        overflow: scroll;
        margin: auto;
        padding-bottom: 100vh;
        z-index: 1;
        visibility: visible;
      }
      .webgl {
        position: fixed;
        top: 0;
        z-index: 0;
      }
      .fg {
        position: fixed;
        top: 0;
        z-index: 2;
      }
      h1 {
        font-family: Domaine Display;
        font-size: 20vw;
        color: white;
        margin: auto;
        text-align: center;
        margin: 1em 0;
        visibility: hidden;
      }
      dl {
        text-align: center;
      }
      dt {
        font-family: 'Isabel-Regular', sans-serif;
      }
      dd {
        padding: 20rem 0;
      }
      .big {
        font-size: 30vw;
      }

  %body
    #standby
    #content
      #stats
      %h1
        MEMES of RELEASE
        %br
        .big 2022
      %dl
        - collection.each_with_index do |meme, index|
          %dt
            = meme['date']  
            %br
            .author= meme['author']
          %dd
            - img = meme['img'] || "no-meme.png"
            %img{src: "/images/memes/2022/#{img}"}
    %canvas.webgl
    %canvas.fg
    %script{id: "vertex-shader", type: "x-shader/x-vertex"}
      :plain
        //
        // GLSL textureless classic 3D noise "cnoise",
        // with an RSL-style periodic variant "pnoise".
        // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
        // Version: 2011-10-11
        //
        // Many thanks to Ian McEwan of Ashima Arts for the
        // ideas for permutation and gradient selection.
        //
        // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
        // Distributed under the MIT license. See LICENSE file.
        // https://github.com/ashima/webgl-noise
        //

        vec3 mod289(vec3 x)
        {
          return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 mod289(vec4 x)
        {
          return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x)
        {
          return mod289(((x*34.0)+1.0)*x);
        }

        vec4 taylorInvSqrt(vec4 r)
        {
          return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec3 fade(vec3 t) {
          return t*t*t*(t*(t*6.0-15.0)+10.0);
        }
        
        // Classic Perlin noise
        float cnoise(vec3 P)
        {
          vec3 Pi0 = floor(P); // Integer part for indexing
          vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
          Pi0 = mod289(Pi0);
          Pi1 = mod289(Pi1);
          vec3 Pf0 = fract(P); // Fractional part for interpolation
          vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
          vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
          vec4 iy = vec4(Pi0.yy, Pi1.yy);
          vec4 iz0 = Pi0.zzzz;
          vec4 iz1 = Pi1.zzzz;

          vec4 ixy = permute(permute(ix) + iy);
          vec4 ixy0 = permute(ixy + iz0);
          vec4 ixy1 = permute(ixy + iz1);

          vec4 gx0 = ixy0 * (1.0 / 5.0);
          vec4 gy0 = fract(floor(gx0) * (1.0 / 5.0)) - 0.5;
          gx0 = fract(gx0);
          vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
          vec4 sz0 = step(gz0, vec4(0.0));
          gx0 -= sz0 * (step(0.0, gx0) - 0.5);
          gy0 -= sz0 * (step(0.0, gy0) - 0.5);

          vec4 gx1 = ixy1 * (1.0 / 5.0);
          vec4 gy1 = fract(floor(gx1) * (1.0 / 5.0)) - 0.5;
          gx1 = fract(gx1);
          vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
          vec4 sz1 = step(gz1, vec4(0.0));
          gx1 -= sz1 * (step(0.0, gx1) - 0.5);
          gy1 -= sz1 * (step(0.0, gy1) - 0.5);

          vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
          vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
          vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
          vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
          vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
          vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
          vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
          vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

          vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
          g000 *= norm0.x;
          g010 *= norm0.y;
          g100 *= norm0.z;
          g110 *= norm0.w;
          vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
          g001 *= norm1.x;
          g011 *= norm1.y;
          g101 *= norm1.z;
          g111 *= norm1.w;

          float n000 = dot(g000, Pf0);
          float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
          float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
          float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
          float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
          float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
          float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
          float n111 = dot(g111, Pf1);

          vec3 fade_xyz = fade(Pf0);
          vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
          vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
          float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
          return 2.2 * n_xyz;
        }

        // Classic Perlin noise, periodic variant
        float pnoise(vec3 P, vec3 rep)
        {
          vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
          vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
          Pi0 = mod289(Pi0);
          Pi1 = mod289(Pi1);
          vec3 Pf0 = fract(P); // Fractional part for interpolation
          vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
          vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
          vec4 iy = vec4(Pi0.yy, Pi1.yy);
          vec4 iz0 = Pi0.zzzz;
          vec4 iz1 = Pi1.zzzz;

          vec4 ixy = permute(permute(ix) + iy);
          vec4 ixy0 = permute(ixy + iz0);
          vec4 ixy1 = permute(ixy + iz1);

          vec4 gx0 = ixy0 * (1.0 / 5.0);
          vec4 gy0 = fract(floor(gx0) * (1.0 / 5.0)) - 0.5;
          gx0 = fract(gx0);
          vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
          vec4 sz0 = step(gz0, vec4(0.0));
          gx0 -= sz0 * (step(0.0, gx0) - 0.5);
          gy0 -= sz0 * (step(0.0, gy0) - 0.5);

          vec4 gx1 = ixy1 * (1.0 / 5.0);
          vec4 gy1 = fract(floor(gx1) * (1.0 / 5.0)) - 0.5;
          gx1 = fract(gx1);
          vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
          vec4 sz1 = step(gz1, vec4(0.0));
          gx1 -= sz1 * (step(0.0, gx1) - 0.5);
          gy1 -= sz1 * (step(0.0, gy1) - 0.5);

          vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
          vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
          vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
          vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
          vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
          vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
          vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
          vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

          vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
          g000 *= norm0.x;
          g010 *= norm0.y;
          g100 *= norm0.z;
          g110 *= norm0.w;
          vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
          g001 *= norm1.x;
          g011 *= norm1.y;
          g101 *= norm1.z;
          g111 *= norm1.w;

          float n000 = dot(g000, Pf0);
          float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
          float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
          float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
          float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
          float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
          float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
          float n111 = dot(g111, Pf1);

          vec3 fade_xyz = fade(Pf0);
          vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
          vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
          float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
          return 1.5 * n_xyz;
        }
        
        // Turbulence By Jaume Sanchez => https://codepen.io/spite/
        
        varying vec2 vUv;
        varying float noise;
        varying float qnoise;
        varying float displacement;
        
        uniform float time;
        uniform float displace;
        uniform float pointscale;
        uniform float decay;
        uniform float size;
        uniform float complex;
        uniform float waves;
        uniform float eqcolor;
        uniform bool fragment;

        float turbulence( vec3 p) {
          float t = - 0.005;
          for (float f = 1.0 ; f <= 1.0 ; f++ ){
            float power = pow( 1.3, f );
            t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );
          }
          return t;
        }

        void main() {

          vUv = uv;

          noise = (2.0 *  - waves) * turbulence( decay * abs(normal + time));
          qnoise = (0.3 *  - eqcolor) * turbulence( decay * abs(normal + time));
          float b = pnoise( complex * (position) + vec3( (decay * 2.0) * time ), vec3( 100.0 ) );
          
          displacement = - atan(noise) + tan(b * displace);

          vec3 newPosition = (position) + (normal * displacement);
          gl_Position = (projectionMatrix * modelViewMatrix) * vec4( newPosition, abs(size) );
          gl_PointSize = (3.0);
        }
    %script{id: "fragment-shader", type: "x-shader/x-vertex"}
      :plain
        varying float qnoise;
        varying float noise;
        
        uniform float time;
        uniform bool redhell;
        uniform float rcolor;
        uniform float gcolor;
        uniform float bcolor;

        void main() {
          float r, g, b;
          
          if (!redhell == true) {
            r = sin(qnoise + rcolor);
            g = normalize(qnoise + (gcolor / 2.0));
            b = tan(qnoise + bcolor);
          } else {
            r = normalize(qnoise + rcolor);
            g = cos(qnoise + gcolor);
            b = sin(qnoise + bcolor);
          }
          gl_FragColor = vec4(r, g, b, 1.0);
        }
    %script{type: "importmap", onerror: "document.querySelector('#standby').className = 'nogood'"}
      :plain
        {
            "imports": {
                "three": "https://unpkg.com/three@0.138.0/build/three.module.js",
                "OrbitControls": "https://unpkg.com/three@0.138.0/examples/jsm/controls/OrbitControls.js",
                "EffectComposer": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/EffectComposer.js",
                "RenderPass": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/RenderPass.js",
                "MaskPass": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/MaskPass.js",
                "ShaderPass": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/ShaderPass.js",
                "CopyShader": "https://unpkg.com/three@0.138.0/examples/jsm/shaders/CopyShader.js",
                "BloomPass": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/BloomPass.js",
                "FilmPass": "https://unpkg.com/three@0.138.0/examples/jsm/postprocessing/FilmPass.js",
                "FontLoader": "https://unpkg.com/three@0.138.0/examples/jsm/loaders/FontLoader.js",
                "TextGeometry": "https://unpkg.com/three@0.138.0/examples/jsm/geometries/TextGeometry.js"
            }
        }
    %script{type: "module", onerror: "document.querySelector('#standby').className = 'nogood'"}
      :plain
        import * as THREE from 'three';
        import { EffectComposer } from 'EffectComposer';
        import { RenderPass } from 'RenderPass';
        import { MaskPass } from 'MaskPass';
        import { ShaderPass } from 'ShaderPass';
        import { BloomPass } from 'BloomPass';
        import { FilmPass } from 'FilmPass';
        import { OrbitControls } from 'OrbitControls';
        import { FontLoader } from 'FontLoader';
        import { TextGeometry } from 'TextGeometry';
        import Stats  from 'https://cdnjs.cloudflare.com/ajax/libs/stats.js/r17/Stats.min.js';

        //--------------------------------------------------------------------
        var scene, camera, renderer, container, controls, renderer2, scene2, camera2, composer, composer2, scrollY, loader;
        var _width, _height;
        var _primitive;
        var shapeGroup = new THREE.Group();
        var updateDistortionEffect;
        var start = Date.now();
        var mat;
        var stats;
        var memes = #{collection.to_json} 

        window.addEventListener('load', init, false);
        function init() {
          createWorld();
          createPrimitive();
          animation();
        }

        var Theme = {
          primary: 0xFFFFFF,
          secundary: 0x292733,
          danger: 0xFF0000,
          darker: 0x000000
        };


        function createStats() {
          stats = new Stats();
          stats.setMode(0);

          stats.domElement.style.position = 'absolute';
          stats.domElement.style.top = '';
          stats.domElement.style.bottom = '0';
          stats.domElement.style.left = '0';

          return stats;
        }

        function createWorld() {
          _width = window.innerWidth;
          _height= window.innerHeight;
          //---
          scene = new THREE.Scene();
          scene.background = new THREE.Color(Theme.secundary);
          //---
          camera = new THREE.PerspectiveCamera(35, _width/_height, 1, 1000);
          camera.position.set(0,0,16);
          //---

          var remaining = 0;
          var coffeeGirl = "https://media1.giphy.com/media/kzpVSiBbOwjNJVbwE2/giphy.gif";
          var coolCat = "https://media2.giphy.com/media/rZ1bBKkaHRVQJTbt0Z/giphy.gif";
          var justOneMore = false;
          loader = new THREE.LoadingManager(
            () => {
              document.querySelector('#standby').style.display = 'none';
              document.querySelector('#content').style.position = 'absolute';
            },
            (itemUrl, itemLoaded, itemsTotal) => {
              remaining = itemsTotal - itemLoaded;
              if(remaining < 2 && !justOneMore) {
                document.querySelector('#standby').style = `background-image: url(${coffeeGirl})`;
                justOneMore = true;
              }
            }
          );

          var c1 = document.querySelector('canvas.webgl');
          var c2 = document.querySelector('canvas.fg');
          renderer = new THREE.WebGLRenderer({antialias:true, alpha:false, canvas: c1});
          renderer.setSize(_width, _height);
          renderer.shadowMap.enabled = true;
          //---
          document.body.appendChild(renderer.domElement);

          //2nd canvas
          renderer2 = new THREE.WebGLRenderer({antialias: true, alpha: true, canvas: c2});
          renderer2.setClearColor(0x000000, 0.1);
          renderer2.setSize(_width, _height);
          document.body.appendChild(renderer2.domElement);
          //---
          stats = createStats();
          //document.body.appendChild(stats.domElement);
          document.querySelector('#stats').appendChild(stats.domElement);
          window.addEventListener('scroll', onScroll, true);
          window.addEventListener('resize', onWindowResize, false);


          scene2 = new THREE.Scene()
          const ambientLight = new THREE.AmbientLight(0xff00ff, 0.7);
          scene2.add(ambientLight);

          camera2 = new THREE.PerspectiveCamera(75, _width / _height, 1, 1000)
          camera2.position.set(0, 0, 5);
          scene2.add(camera2);

          const baseTextGeo = {
            height: 0,
            curveSegments: 15,
            bevelEnabled: false,
          };

          const imgLoader = new THREE.ImageLoader(loader);
          imgLoader.load(coffeeGirl);
          const fontLoader = new FontLoader(loader);
          createTextMesh('MEMES OF RELEASE', {y: 0, size: 1.5, color: '#52254C', ...baseTextGeo});
          createTextMesh('2022', {y: -4, size: 4, color: '#52254C', ...baseTextGeo});
          var prevOffset = 0;
          var offset = 0;
          memes.forEach((meme, i) => { 
            if(meme['img'] != 'jul13.gif') {
              imgLoader.load(`/images/memes/2022/${meme['img']}`);
            }
            var gap = 12;
            var ypos = -(gap) * i;
            if (meme['offset'] > 0) {
              if(offset != meme['offset']) { 
                prevOffset = offset;
                offset = meme['offset'];
              }
            }
            var ypad = 16 + offset;
            createTextMesh(meme['date'], {y: (ypos - ypad), size: 2, color: '#D5E5FD', ...baseTextGeo});
            createTextMesh(meme['author'], {y: (ypos - ypad - 1), size: 1.2, color: '#232323', ...baseTextGeo}, 'helvetiker_bold');
          });

          function createTextMesh(str, params, fontface="gentilis_bold", ) {
            fontLoader.load(
              `/fonts/${fontface}.typeface.json`,
              (font) => { 
                const textGeometry = new TextGeometry(
                  str,
                  {
                    ...params,
                    font
                  }
                );
                textGeometry.center();
                const textMaterial = new THREE.MeshBasicMaterial({color: params['color']});
                const text = new THREE.Mesh(textGeometry, textMaterial);
                text.position.set(0, params['y'], 0);
                scene2.add(text);
              }
            );
          }

          composer = new EffectComposer( renderer );
          composer.addPass( new RenderPass( scene, camera ) );
          composer2 = new EffectComposer( renderer2 );
          composer2.addPass( new RenderPass( scene2, camera2 ) );
          var effectBloom = new BloomPass(1, 25, 1);
          var effectFilm = new FilmPass(0.8, 0.325, 200, false);
          var effectFilm2 = new FilmPass(0.5, 0.325, 1, false);
          var effect = new ShaderPass( getDistortionShaderDefinition() );
          composer2.addPass (effectBloom);
          composer2.addPass (effectFilm2);
          composer2.addPass( effect );
          composer.addPass(effectFilm);
          effect.renderToScreen = true;
          setupDistortionEffectAndGUI(effect);

          function setupDistortionEffectAndGUI(effect)
          {
            var guiParameters = {
              horizontalFOV:		140,
              strength: 			1,
              cylindricalRatio:	0.5,
              y: 0,
            };				

            updateDistortionEffect = function( ) {
              
              var height = Math.tan(THREE.Math.degToRad(guiParameters.horizontalFOV) / 2) / camera.aspect;

              camera2.fov = Math.atan(height) * 2 * 180 / 3.1415926535;
              camera2.updateProjectionMatrix();

              effect.uniforms[ "strength" ].value = guiParameters.strength;
              effect.uniforms[ "height" ].value = height;
              effect.uniforms[ "aspectRatio" ].value = camera2.aspect;
              effect.uniforms[ "cylindricalRatio" ].value = guiParameters.cylindricalRatio;
            };		
            updateDistortionEffect();
          }

          function getDistortionShaderDefinition()
          {
            return {
            
              uniforms: {
                "tDiffuse": 		{ type: "t", value: null },
                "strength": 		{ type: "f", value: 0 },
                "height": 			{ type: "f", value: 1 },
                "aspectRatio":		{ type: "f", value: 1 },
                "cylindricalRatio": { type: "f", value: 1 }
              },

              vertexShader: [
                "uniform float strength;",          // s: 0 = perspective, 1 = stereographic
                "uniform float height;",            // h: tan(verticalFOVInRadians / 2)
                "uniform float aspectRatio;",       // a: screenWidth / screenHeight
                "uniform float cylindricalRatio;",  // c: cylindrical distortion ratio. 1 = spherical
                 
                "varying vec3 vUV;",                // output to interpolate over screen
                "varying vec2 vUVDot;",             // output to interpolate over screen
                 
                "void main() {",
                  "gl_Position = projectionMatrix * (modelViewMatrix * vec4(position, 1.0));",
                 
                  "float scaledHeight = strength * height;",
                  "float cylAspectRatio = aspectRatio * cylindricalRatio;",
                  "float aspectDiagSq = aspectRatio * aspectRatio + 1.0;",
                  "float diagSq = scaledHeight * scaledHeight * aspectDiagSq;",
                  "vec2 signedUV = (2.0 * uv + vec2(-1.0, -1.0));",
                 
                  "float z = 0.5 * sqrt(diagSq + 1.0) + 0.5;",
                  "float ny = (z - 1.0) / (cylAspectRatio * cylAspectRatio + 1.0);",
                 
                  "vUVDot = sqrt(ny) * vec2(cylAspectRatio, 1.0) * signedUV;",
                  "vUV = vec3(0.5, 0.5, 1.0) * z + vec3(-0.5, -0.5, 0.0);",
                  "vUV.xy += uv;",
                "}"
              ].join("\n"),
              
              fragmentShader: [
                "uniform sampler2D tDiffuse;",      // sampler of rendered scenes render target
                "varying vec3 vUV;",                // interpolated vertex output data
                "varying vec2 vUVDot;",             // interpolated vertex output data
     
                "void main() {",
                  "vec3 uv = dot(vUVDot, vUVDot) * vec3(-0.5, -0.5, -1.0) + vUV;",
                  "gl_FragColor = texture2DProj(tDiffuse, uv);",
                "}"
              ].join("\n")

            };
          }

        }
        function onWindowResize() {
          _width = window.innerWidth;
          _height = window.innerHeight;
          //renderer.setSize(_width, _height);
          renderer2.setSize(_width, _height);
          camera.aspect = _width / _height;
          camera.updateProjectionMatrix();
        }
        function onScroll(event) {
          scrollY = window.scrollY; 
          camera2.position.y = -(scrollY/100);
        }
        //--------------------------------------------------------------------
        var primitiveElement = function() {
          this.mesh = new THREE.Object3D();
          mat = new THREE.ShaderMaterial( {
            side:THREE.DoubleSide,
            uniforms: {
              time: {
                type: "f",
                value: 0.1
              },
              pointscale: {
                type: "f",
                value: 0.2
              },
              decay: {
                type: "f",
                value: 0.3
              },
              size: {
                type: "f",
                value: 0.3
              },
              displace: {
                type: "f",
                value: 0.3
              },
              complex: {
                type: "f",
                value: 0.0
              },
              waves: {
                type: "f",
                value: 0.10
              },
              eqcolor: {
                type: "f",
                value: 0.0
              },
              rcolor: {
                type: "f",
                value: 0.0
              },
              gcolor: {
                type: "f",
                value: 0.0
              },
              bcolor: {
                type: "f",
                value: 0.0
              },
              fragment: {
                type: "i",
                value: true
              },
              redhell: {
                type: "i",
                value: true
              }
            },
            vertexShader: document.getElementById( 'vertex-shader' ).textContent,
            fragmentShader: document.getElementById( 'fragment-shader' ).textContent
          });
          //---
          var wir_mat = new THREE.MeshBasicMaterial({color:Theme.darker});
          var geo = new THREE.IcosahedronBufferGeometry(2, 6);
          var wir = new THREE.IcosahedronBufferGeometry(2.3, 2);
          this.shape = new THREE.Mesh(geo, mat);
          this.point = new THREE.Points(wir, mat);
          //---
          shapeGroup.add(this.point);
          shapeGroup.add(this.shape);
          
          scene.add(shapeGroup);
        }
        function createPrimitive() {
          _primitive = new primitiveElement();
        }

        var options = {
          perlin: {
            speed: 0.1,
            size: 0.1,
            perlins: 10.5,
            decay: 1.00,
            displace: 1.00,
            complex: 1.0,
            waves: 1.7,
            eqcolor: 10.0,
            rcolor: 1.5,
            gcolor: 1.5,
            bcolor: 1.5,
            fragment: false,
            points: false,
            redhell: true
          },
        }

        function animation() {
          var performance = Date.now() * 0.003;
          stats.update();
          //---
          //_primitive.shape.visible = !options.perlin.points;
          _primitive.point.visible = options.perlin.points;
          //---
          mat.uniforms['time'].value = (options.perlin.speed / 1000) * (Date.now() - start);
          
          mat.uniforms['pointscale'].value =    options.perlin.perlins;
          mat.uniforms['decay'].value =         options.perlin.decay;
          mat.uniforms['size'].value =          options.perlin.size;
          mat.uniforms['displace'].value =      options.perlin.displace;
          mat.uniforms['complex'].value =       options.perlin.complex;
          mat.uniforms['waves'].value =         options.perlin.waves;
          mat.uniforms['fragment'].value =      options.perlin.fragment;
          
          mat.uniforms['redhell'].value =       options.perlin.redhell;
          mat.uniforms['eqcolor'].value =       options.perlin.eqcolor;
          mat.uniforms['rcolor'].value =        options.perlin.rcolor;
          mat.uniforms['gcolor'].value =        options.perlin.gcolor;
          mat.uniforms['bcolor'].value =        options.perlin.bcolor;

          requestAnimationFrame(animation);
          composer.render();
          composer2.render();
        }

